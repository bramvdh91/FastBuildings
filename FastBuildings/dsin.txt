#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
 1.0000000000000000E+006   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(68,30)
simFasBui.nIrr
simFasBui.TAmb
simFasBui.qHeaCoo
simFasBui.powEle
simFasBui.irr[1]
bui.zon.nIrr
bui.zon.heaPorCon.Q_flow
bui.zon.heaPorRad.Q_flow
bui.zon.heaPorEmb.Q_flow
bui.zon.cZon
bui.zon.rWal
bui.zon.capZon.c
bui.zon.capZon.TSta
bui.zon.capZon.heaPor.T
bui.zon.capZon.heaPor.der(T)
bui.zon.capZon.heaPor.Q_flow
bui.zon.win[1].heaPor1.Q_flow
bui.zon.win[1].gA
bui.zon.win[1].fraHeaPor1
bui.zon.win[1].heaPor2.Q_flow
bui.zon.resWal.heaPor_a.Q_flow
bui.zon.resWal.r
bui.zon.senTZon.port.Q_flow
bui.zon.cInt
bui.zon.rInt
bui.zon.capInt.c
bui.zon.capInt.TSta
bui.zon.capInt.heaPor.T
bui.zon.capInt.heaPor.der(T)
bui.zon.capInt.heaPor.Q_flow
bui.zon.resInt.heaPor_a.Q_flow
bui.zon.resInt.r
bui.hva.heaPorRad.Q_flow
bui.hva.heaPorCon.Q_flow
bui.hva.heaPorEmb.Q_flow
bui.hva.fraRad
bui.use.fraTot
bui.use.fraCon
bui.use.fraRad
bui.use.heaPorCon.Q_flow
bui.use.heaPorRad.Q_flow
TAmbSin.amplitude
TAmbSin.freqHz
TAmbSin.phase
TAmbSin.offset
TAmbSin.startTime
TAmbSin.pi
qHea.height
qHea.offset
qHea.startTime
max1.u1
IGloHor.amplitude
IGloHor.freqHz
IGloHor.phase
IGloHor.offset
IGloHor.startTime
IGloHor.pi
const.k
powElePul.amplitude
powElePul.width
powElePul.period
powElePul.nperiod
powElePul.offset
powElePul.startTime
powElePul.T_width
powElePul.T_start
powElePul.count
const1.k

double initialValue(68,6)
  0       1                       1                 1.0000000000000000E+100
  6   258   # simFasBui.nIrr
  0 2.8814999999999998E+002       0                 1.0000000000000000E+100
  6   256   # simFasBui.TAmb
  0       0                       0                       0                
  6   320   # simFasBui.qHeaCoo
  0       0                       0                       0                
  6   320   # simFasBui.powEle
  0       0                       0                       0                
  6   256   # simFasBui.irr[1]
  0       1                       0                       0                
  6   258   # bui.zon.nIrr
  0       0                       0                       0                
  6   452   # bui.zon.heaPorCon.Q_flow
  0       0                       0                       0                
  6   452   # bui.zon.heaPorRad.Q_flow
  0       0                       0                       0                
  6   388   # bui.zon.heaPorEmb.Q_flow
 -1 1.0000000000000000E+006       0                       0                
  1   280   # bui.zon.cZon
 -1       1                       0                       0                
  1   280   # bui.zon.rWal
  0       0                       0                       0                
  6   256   # bui.zon.capZon.c
 -1 2.9314999999999998E+002       0                 1.0000000000000000E+100
  1   280   # bui.zon.capZon.TSta
 -1       0                       0                 1.0000000000000000E+100
  2   276   # bui.zon.capZon.heaPor.T
  0       0                       0                       0                
  3   260   # bui.zon.capZon.heaPor.der(T)
  0       0                       0                       0                
  6   388   # bui.zon.capZon.heaPor.Q_flow
  0       0                       0                       0                
  6   388   # bui.zon.win[1].heaPor1.Q_flow
 -1       1                       0                       0                
  1   280   # bui.zon.win[1].gA
 -1 5.0000000000000000E-001       0                       1                
  1   280   # bui.zon.win[1].fraHeaPor1
  0       0                       0                       0                
  6   388   # bui.zon.win[1].heaPor2.Q_flow
  0       0                       0                       0                
  6   388   # bui.zon.resWal.heaPor_a.Q_flow
  0       0                       0                       0                
  6   256   # bui.zon.resWal.r
  0       0                       0                       0                
  6  1412   # bui.zon.senTZon.port.Q_flow
 -1 1.0000000000000000E+007       0                       0                
  1   280   # bui.zon.cInt
 -1 1.0000000000000000E-002       0                       0                
  1   280   # bui.zon.rInt
  0       0                       0                       0                
  6   256   # bui.zon.capInt.c
 -1 2.9314999999999998E+002       0                 1.0000000000000000E+100
  1   280   # bui.zon.capInt.TSta
 -1       0                       0                 1.0000000000000000E+100
  2   276   # bui.zon.capInt.heaPor.T
  0       0                       0                       0                
  3   260   # bui.zon.capInt.heaPor.der(T)
  0       0                       0                       0                
  6   388   # bui.zon.capInt.heaPor.Q_flow
  0       0                       0                       0                
  6   388   # bui.zon.resInt.heaPor_a.Q_flow
  0       0                       0                       0                
  6   256   # bui.zon.resInt.r
  0       0                       0                       0                
  6   452   # bui.hva.heaPorRad.Q_flow
  0       0                       0                       0                
  6   452   # bui.hva.heaPorCon.Q_flow
  0       0                       0                       0                
  6   388   # bui.hva.heaPorEmb.Q_flow
 -1 2.9999999999999999E-001       0                       0                
  1   280   # bui.hva.fraRad
 -1       1                       0                       0                
  1   280   # bui.use.fraTot
 -1 6.9999999999999996E-001       0                       0                
  1   280   # bui.use.fraCon
  0       0                       0                       0                
  6   256   # bui.use.fraRad
  0       0                       0                       0                
  6   452   # bui.use.heaPorCon.Q_flow
  0       0                       0                       0                
  6   452   # bui.use.heaPorRad.Q_flow
 -1       8                       0                       0                
  1   280   # TAmbSin.amplitude
 -1 1.1574074074074073E-005       0                       0                
  1   280   # TAmbSin.freqHz
 -1       0                       0                       0                
  1   280   # TAmbSin.phase
 -1     283                       0                       0                
  1   280   # TAmbSin.offset
 -1       0                       0                       0                
  1   280   # TAmbSin.startTime
  0 3.1415926535897931E+000       0                       0                
  6  1280   # TAmbSin.pi
 -1    1000                       0                       0                
  1   280   # qHea.height
 -1       0                       0                       0                
  1   280   # qHea.offset
 -1   86400                       0                       0                
  1   280   # qHea.startTime
  0       0                       0                       0                
  6   256   # max1.u1
 -1     600                       0                       0                
  1   280   # IGloHor.amplitude
 -1 1.1574074074074073E-005       0                       0                
  1   280   # IGloHor.freqHz
 -1       0                       0                       0                
  1   280   # IGloHor.phase
 -1       0                       0                       0                
  1   280   # IGloHor.offset
 -1       0                       0                       0                
  1   280   # IGloHor.startTime
  0 3.1415926535897931E+000       0                       0                
  6  1280   # IGloHor.pi
 -1       0                       0                       0                
  1   280   # const.k
 -1     500                       0                       0                
  1   280   # powElePul.amplitude
 -1      50                 9.9999999999999997E-061     100                
  1   280   # powElePul.width
 -1   86400                 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # powElePul.period
 -1      -1                       0                       0                
  1   282   # powElePul.nperiod
 -1       0                       0                       0                
  1   280   # powElePul.offset
 -1   25000                       0                       0                
  1   280   # powElePul.startTime
  0       0                       0                       0                
  6  1280   # powElePul.T_width
  0       0                       0                       0                
  6  1344   # powElePul.T_start
  0       0                       0                       0                
  6  1346   # powElePul.count
 -1 2.9314999999999998E+002       0                       0                
  1   280   # const1.k


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(68,75)
Number of irradiation vectors [:#(type=Integer)]
Ambient temperature [K]
Heating/cooling
Electricity consumption
Array with irradiation inputs
Number of irradiation inputs/windows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Thermal capacity of the zone [J/K]
Total thermal resistance of the walls, in K/W [K/W]
Heat capacity of element (= cp*m) [J/K]
Initial temperature for the capacity, fixed=true [K|degC]
Port temperature [K|degC]
der(Port temperature) [K/s]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
gA value of the window(s)
Fraction of heat flux to heaPor1
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Constant thermal resistance [K/W]
Heat flow rate (positive if flowing from outside into the component) [W]
Thermal capacity of the zone [J/K]
Total thermal resistance of the walls, in K/W [K/W]
Heat capacity of element (= cp*m) [J/K]
Initial temperature for the capacity, fixed=true [K|degC]
Port temperature [K|degC]
der(Port temperature) [K/s]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Constant thermal resistance [K/W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Fraction of heating to radiation
Fraction of powEle that is converted into internal gains
Fraction of PUsers that is converted in convective heat
Fraction of PUsers that is converted in radiative heat
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Amplitude of sine wave
Frequency of sine wave [Hz]
Phase of sine wave [rad|deg]
Offset of output signal
Output = offset for time < startTime [s]

Height of step
Offset of output signal y
Output y = offset for time < startTime [s]
Connector of Real input signal 1
Amplitude of sine wave
Frequency of sine wave [Hz]
Phase of sine wave [rad|deg]
Offset of output signal
Output = offset for time < startTime [s]

Constant output value
Amplitude of pulse
Width of pulse in % of period
Time for one period [s]
Number of periods (< 0 means infinite number of periods) [:#(type=Integer)]
Offset of output signals
Output = offset for time < startTime [s]
[s]
Start time of current period [s]
Period count [:#(type=Integer)]
Constant output value

